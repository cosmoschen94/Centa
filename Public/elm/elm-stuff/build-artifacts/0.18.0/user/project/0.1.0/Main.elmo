var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$infoStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'height', _1: '150px'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px 0'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'font-size', _1: '2em'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _user$project$Main$nameStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'height', _1: '40px'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px 0'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'font-size', _1: '2em'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _user$project$Main$infoFooter = A2(
	_elm_lang$html$Html$footer,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('info'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$p,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Making it happen'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('By hyouuu & Jackson'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Main$apiTrip = '/api/trip';
var _user$project$Main$apiTrips = '/api/trips';
var _user$project$Main$tripEncoder = function (trip) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'uid',
				_1: _elm_lang$core$Json_Encode$string(trip.uid)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'name',
					_1: _elm_lang$core$Json_Encode$string(trip.name)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'info',
						_1: _elm_lang$core$Json_Encode$string(trip.info)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$newTrip = F3(
	function (uid, name, info) {
		return {uid: uid, name: name, info: info};
	});
var _user$project$Main$emptyModel = {
	uid: '',
	name: '',
	info: '',
	isNew: true,
	trips: {ctor: '[]'}
};
var _user$project$Main$Flags = F4(
	function (a, b, c, d) {
		return {uid: a, name: b, info: c, isNew: d};
	});
var _user$project$Main$Model = F5(
	function (a, b, c, d, e) {
		return {uid: a, name: b, info: c, isNew: d, trips: e};
	});
var _user$project$Main$Trip = F3(
	function (a, b, c) {
		return {uid: a, name: b, info: c};
	});
var _user$project$Main$tripDecoder = function () {
	var _p0 = A2(
		_elm_lang$core$Debug$log,
		'tripDecoder fields',
		A2(_elm_lang$core$Json_Decode$field, 'body', _elm_lang$core$Json_Decode$string));
	return A4(
		_elm_lang$core$Json_Decode$map3,
		_user$project$Main$Trip,
		A2(_elm_lang$core$Json_Decode$field, 'uid', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode$field, 'info', _elm_lang$core$Json_Decode$string));
}();
var _user$project$Main$tripsDecoder = function () {
	var _p1 = A2(
		_elm_lang$core$Debug$log,
		'tripsDecoder fields',
		A2(_elm_lang$core$Json_Decode$field, 'body', _elm_lang$core$Json_Decode$string));
	return _elm_lang$core$Json_Decode$list(_user$project$Main$tripDecoder);
}();
var _user$project$Main$NewUid = function (a) {
	return {ctor: 'NewUid', _0: a};
};
var _user$project$Main$UpdateTrip = function (a) {
	return {ctor: 'UpdateTrip', _0: a};
};
var _user$project$Main$updateTrip = function (trip) {
	var request = A3(
		_elm_lang$http$Http$post,
		_user$project$Main$apiTrip,
		_elm_lang$http$Http$jsonBody(
			_user$project$Main$tripEncoder(trip)),
		_user$project$Main$tripDecoder);
	var _p2 = _elm_lang$core$Debug$log(
		A2(_elm_lang$core$Basics_ops['++'], 'updateTrip uid:', trip.uid));
	return A2(_elm_lang$http$Http$send, _user$project$Main$UpdateTrip, request);
};
var _user$project$Main$FetchTrip = function (a) {
	return {ctor: 'FetchTrip', _0: a};
};
var _user$project$Main$fetchTrip = function (uid) {
	var request = A2(
		_elm_lang$http$Http$get,
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$Main$apiTrip,
			A2(_elm_lang$core$Basics_ops['++'], '/', uid)),
		_user$project$Main$tripDecoder);
	var _p3 = _elm_lang$core$Debug$log(
		A2(_elm_lang$core$Basics_ops['++'], 'fetchTrip uid:', uid));
	return A2(_elm_lang$http$Http$send, _user$project$Main$FetchTrip, request);
};
var _user$project$Main$AddCurTripIfNeeded = {ctor: 'AddCurTripIfNeeded'};
var _user$project$Main$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p4 = msg;
			switch (_p4.ctor) {
				case 'NoOp':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				case 'Add':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{uid: '', name: '', info: '', isNew: true, trips: model.trips}),
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Random$generate,
								_user$project$Main$NewUid,
								A2(_elm_community$random_extra$Random_String$string, 6, _elm_community$random_extra$Random_Char$english)),
							_1: {ctor: '[]'}
						});
				case 'Delete':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								trips: A2(
									_elm_lang$core$List$filter,
									function (t) {
										return !_elm_lang$core$Native_Utils.eq(t.uid, _p4._0);
									},
									model.trips)
							}),
						{ctor: '[]'});
				case 'Edit':
					var _p5 = _p4._0;
					var t = A2(
						_elm_lang$core$Maybe$withDefault,
						{uid: 'efg', name: '', info: ''},
						_elm_lang$core$List$head(
							A2(
								_elm_lang$core$List$filter,
								function (t) {
									return _elm_lang$core$Native_Utils.eq(t.uid, _p5);
								},
								model.trips)));
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								uid: _p5,
								name: t.name,
								info: t.info,
								isNew: _elm_lang$core$String$isEmpty(t.name)
							}),
						{ctor: '[]'});
				case 'Name':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{name: _p4._0}),
						{ctor: '[]'});
				case 'Info':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{info: _p4._0}),
						{ctor: '[]'});
				case 'Reset':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Main$fetchTrip(model.uid)
					};
				case 'Save':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Main$updateTrip(
							A3(_user$project$Main$Trip, model.uid, model.name, model.info))
					};
				case 'FetchTrips':
					if (_p4._0.ctor === 'Ok') {
						var _p7 = _p4._0._0;
						var _p6 = A2(_elm_lang$core$Debug$log, 'FetchTrips ok', _p7);
						var _v1 = _user$project$Main$AddCurTripIfNeeded,
							_v2 = _elm_lang$core$Native_Utils.update(
							model,
							{trips: _p7});
						msg = _v1;
						model = _v2;
						continue update;
					} else {
						var _p8 = A2(_elm_lang$core$Debug$log, 'FetchTrips err', _p4._0._0);
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'AddCurTripIfNeeded':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								trips: function () {
									var _p9 = _elm_lang$core$List$head(
										A2(
											_elm_lang$core$List$filter,
											function (t) {
												return _elm_lang$core$Native_Utils.eq(t.uid, model.uid);
											},
											model.trips));
									if (_p9.ctor === 'Nothing') {
										return A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: A3(_user$project$Main$newTrip, model.uid, model.name, model.info),
												_1: {ctor: '[]'}
											},
											model.trips);
									} else {
										return model.trips;
									}
								}()
							}),
						{ctor: '[]'});
				case 'FetchTrip':
					if (_p4._0.ctor === 'Ok') {
						var _p11 = _p4._0._0;
						var _p10 = A2(_elm_lang$core$Debug$log, 'FetchTrip ok', _p11);
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{uid: _p11.uid, name: _p11.name, info: _p11.info}),
							{ctor: '[]'});
					} else {
						var _p12 = A2(_elm_lang$core$Debug$log, 'FetchTrip err', _p4._0._0);
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'UpdateTrip':
					if (_p4._0.ctor === 'Ok') {
						var _p14 = _p4._0._0;
						var updateTrip = function (t) {
							return _elm_lang$core$Native_Utils.eq(t.uid, _p14.uid) ? _elm_lang$core$Native_Utils.update(
								t,
								{name: _p14.name, info: _p14.info}) : t;
						};
						var _p13 = A2(_elm_lang$core$Debug$log, 'UpdateTrip ok', _p14);
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									isNew: false,
									trips: A2(_elm_lang$core$List$map, updateTrip, model.trips)
								}),
							{ctor: '[]'});
					} else {
						var _p15 = A2(_elm_lang$core$Debug$log, 'UpdateTrip err', _p4._0._0);
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				default:
					var _p16 = _p4._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								uid: _p16,
								trips: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: A3(_user$project$Main$newTrip, _p16, model.name, model.info),
										_1: {ctor: '[]'}
									},
									model.trips)
							}),
						{ctor: '[]'});
			}
		}
	});
var _user$project$Main$FetchTrips = function (a) {
	return {ctor: 'FetchTrips', _0: a};
};
var _user$project$Main$fetchTrips = function () {
	var request = A2(_elm_lang$http$Http$get, _user$project$Main$apiTrips, _user$project$Main$tripsDecoder);
	var _p17 = _elm_lang$core$Debug$log('fetchTrips');
	return A2(_elm_lang$http$Http$send, _user$project$Main$FetchTrips, request);
}();
var _user$project$Main$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: A5(
			_user$project$Main$Model,
			flags.uid,
			flags.name,
			flags.info,
			flags.isNew,
			{ctor: '[]'}),
		_1: _user$project$Main$fetchTrips
	};
};
var _user$project$Main$Save = {ctor: 'Save'};
var _user$project$Main$Reset = {ctor: 'Reset'};
var _user$project$Main$Info = function (a) {
	return {ctor: 'Info', _0: a};
};
var _user$project$Main$Name = function (a) {
	return {ctor: 'Name', _0: a};
};
var _user$project$Main$Edit = function (a) {
	return {ctor: 'Edit', _0: a};
};
var _user$project$Main$viewTrip = function (trip) {
	var nameEmpty = _elm_lang$core$String$isEmpty(trip.name);
	var title = nameEmpty ? 'Unsaved New Trip' : trip.name;
	return A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onClick(
				_user$project$Main$Edit(trip.uid)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'btn-block', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'btn btn-outline-danger', _1: nameEmpty},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'btn btn-outline-info', _1: !nameEmpty},
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-size', _1: '1.3vw'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(title),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$viewKeyedTrip = function (trip) {
	return {
		ctor: '_Tuple2',
		_0: trip.uid,
		_1: A2(_elm_lang$html$Html_Lazy$lazy, _user$project$Main$viewTrip, trip)
	};
};
var _user$project$Main$viewTrips = function (trips) {
	var _p18 = A2(_elm_lang$core$Debug$log, 'ViewTrips ', trips);
	return A2(
		_elm_lang$html$Html$section,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html_Keyed$ol,
				{ctor: '[]'},
				A2(_elm_lang$core$List$map, _user$project$Main$viewKeyedTrip, trips)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$Delete = function (a) {
	return {ctor: 'Delete', _0: a};
};
var _user$project$Main$Add = {ctor: 'Add'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('m-x-auto'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('container'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('row'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('col-sm-8'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$section,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('trip-info'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$label,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(
															_elm_lang$core$Basics_ops['++'],
															'Share URL: id/',
															A2(
																_elm_lang$core$Basics_ops['++'],
																model.uid,
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	' isNew:',
																	model.isNew ? 'true' : 'false')))),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$input,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$placeholder('Enter Name...'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$value(model.name),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$Name),
																_1: {
																	ctor: '::',
																	_0: _user$project$Main$nameStyle,
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$br,
														{ctor: '[]'},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$br,
															{ctor: '[]'},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$textarea,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$cols(40),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$rows(10),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$placeholder('Info...'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$value(model.info),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$Info),
																					_1: {
																						ctor: '::',
																						_0: _user$project$Main$infoStyle,
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('btn-group'),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$button,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Reset),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('btn btn-secondary ml-3 mr-1'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$disabled(model.isNew),
																						_1: {ctor: '[]'}
																					}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Reset'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$button,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Save),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('btn btn-primary ml-1 mr-3'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$disabled(
																								_elm_lang$core$String$isEmpty(model.name)),
																							_1: {ctor: '[]'}
																						}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Save'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('col-sm-4'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$section,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('all-tirps'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$label,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Upcoming Trips'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$br,
														{ctor: '[]'},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Add),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('btn-block btn btn-success'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$disabled(model.isNew),
																		_1: {ctor: '[]'}
																	}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Add New'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$br,
																{ctor: '[]'},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(_elm_lang$html$Html_Lazy$lazy, _user$project$Main$viewTrips, model.trips),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: _user$project$Main$infoFooter,
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (info) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (isNew) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (name) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (uid) {
									return _elm_lang$core$Json_Decode$succeed(
										{info: info, isNew: isNew, name: name, uid: uid});
								},
								A2(_elm_lang$core$Json_Decode$field, 'uid', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string));
				},
				A2(_elm_lang$core$Json_Decode$field, 'isNew', _elm_lang$core$Json_Decode$bool));
		},
		A2(_elm_lang$core$Json_Decode$field, 'info', _elm_lang$core$Json_Decode$string)));
var _user$project$Main$NoOp = {ctor: 'NoOp'};
